#include <OneWire.h>
#include <DS18B20.h>

#define MIN_VOLTAGE     600 // mv - próg dolnego zakresu napiêcia dla braku py³u
#define VREF           5000 // mv - napiêcie referencyjne komparatora
#define PIN_LED           7 // numer pinu ILED
#define PIN_ANALOG        0 // numer pinu AOUT
#define MAX_ITERS        10 // liczba pomiarow do sredniej
#define ONEWIRE_PIN       2 // pin do termometru

 
int ADC_VALUE; // odczytana wartosc A0
int ITER; // numer pomiaru
float VOLTAGE; // wartosc napiecia
float DUST; // wynik
float AVG_DUST; // sredni wynik
byte address[8] = {0x28, 0xFF, 0x4C, 0xFC, 0xB4, 0x16, 0x5, 0xB8}; // numer adres termometru

OneWire onewire(ONEWIRE_PIN);
DS18B20 sensors(&onewire);

void setup()
{
   
  Serial.begin(9600);
 

  sensors.begin();
  sensors.request(address);
}
float computeDust()
{
  ADC_VALUE = analogRead(PIN_ANALOG);
  digitalWrite(PIN_LED, LOW);
 
  VOLTAGE = (VREF / 1024.0) * ADC_VALUE * 11;
 
   
  if (VOLTAGE > MIN_VOLTAGE)
  {
    return (VOLTAGE - MIN_VOLTAGE) * 0.2;
  }
 
  return 0;
}
 
void loop()
{
   AVG_DUST = 0;
   ITER = 0;
 
   while (ITER < MAX_ITERS)
   {
     DUST = computeDust();
     if (DUST > 0)
     {
       AVG_DUST += DUST;
       ITER++;
       delay(50);
     }     
   }
   
   AVG_DUST /= MAX_ITERS;
   
   Serial.print("D = ");
   Serial.print(AVG_DUST);
   Serial.println("ug/m3");    
 
   delay(500);

    if (sensors.available())
  {
    float temperature = sensors.readTemperature(address);
    //TE(temperature);
    Serial.print(temperature);
    Serial.println(F(" 'C"));

    sensors.request(address);
  }
    delay(500);
  }

